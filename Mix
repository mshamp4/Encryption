package project4;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;

/***********************************************************************
 *
 * This class is the controller for the Encryption Project. This class 
 * processes all of the commands and manipulates the model.
 *
 * @author Matthew Shampine
 * @version 1.0
 ***********************************************************************/
public class Mix implements IMix {

	/** Linked list of characters representing a message (String) */ 
	private MyLinkedList message;

	/** Commands that will help set up the manpage for the help command */
	private final String[] MANUAL = {"gnome-terminal", "-e", 
	"man encryption"};

	/*******************************************************************
	 * Mix constructor that initializes a new linked list.
	 *
	 ******************************************************************/
	public Mix () {
		message = new MyLinkedList();
	}

	/*******************************************************************
	 * Main method that can invoke its own methods inside the class.
	 * 
	 * @param args parameter used for debugging and testing purposes.
	 ******************************************************************/
	public static void main(String[] args) {
		Mix list = new Mix();
		list.encrypt();
	}

	/*******************************************************************
	 * Method that sets up a new message and commands are sent to the 
	 * processCommand(String command) method.
	 *
	 ******************************************************************/
	public void encrypt() {
		System.out.print("Enter a message to mix it up!\n\t");

		Scanner sc = new Scanner(System.in);
		String input = sc.nextLine().replaceAll("\\s+", " ");

		while (input.trim().isEmpty()) { 
			System.out.print("You must enter a secret message!\n\t");
			input = sc.nextLine();
		}

		setInitialMessage(input);
		display();

		while (!input.equalsIgnoreCase("q")) {

			System.out.print("Command:\n\t");
			input = sc.nextLine().trim();

			if (!input.equalsIgnoreCase("q")) {
				processCommand(input);
				display();
			}
		}
		sc.close();

		System.out.print("Final mixed up message: " + message.toString());
	}

	/*******************************************************************
	 * Method that displays the updated message to the user.
	 *
	 ******************************************************************/
	public void display() {

		String s = message.toString();
		String finalMessage = "";
		String numbers = "";

		System.out.print("Message:\n\t");

		for (int i = 0; i < message.getCount(); i++) {
			numbers += i + " ";
			String letter = s.substring(i, i + 1);
			if (i < 10)
				finalMessage += letter + " ";
			else if (i < 99) 
				finalMessage += letter + "  ";
			else 
				finalMessage += letter + "   ";
		}
		System.out.print(numbers);
		System.out.print("\n\t");
		System.out.println(finalMessage);
	}

	/*******************************************************************
	 * Method that sets the original String message into a linked list.
	 * 
	 * @param message the initial message to be sent into a linked list.
	 * @Override
	 ******************************************************************/
	public void setInitialMessage(String message) {
		this.message.add(message);
	}

	/*******************************************************************
	 * Method that processes the commands and sends the command over to the
	 * linked list class.
	 * 
	 * @param temp the command that the user enters
	 * @return message the modified message that the command returns
	 * @Override
	 ******************************************************************/
	public String processCommand(String temp) {

		String[] command = temp.split("\\s+");

		switch (command[0]) {
		case "a":
			if (isValidAdd(command)) {
				try {
					int index = Integer.parseInt(command[2]);
					message.addAfterIndex(command[1], index);
				} catch (IndexOutOfBoundsException e) {
					System.out.println("Error: Integer cannot exceed "
							+ "message length");
				}
			}
			break;
		case "r":
			if (isValidRemove(command))
				if (!message.delete(command[1]))
					System.out.println("Notice: No character to remove!");
			break;
		case "s":
			if (isValidSave(command))
				save(command[1]);
			break;
		case "c":
			if (isValidCopy(command)) {
				int startPos = Integer.parseInt(command[1]);
				int endPos = Integer.parseInt(command[2]);
				int clipNum = Integer.parseInt(command[3]);
				try {
					message.copy(startPos, endPos, clipNum);
				} catch (IndexOutOfBoundsException e) {
					System.out.println("Error: Integer cannot exceed "
							+ "message length");
				} catch (IllegalArgumentException e) {
					System.out.println("Error: You can only copy from 0 to "
							+ (message.getCount() -1));
				}
			}
			break;
		case "p":
			if (isValidPaste(command)) {
				int index = Integer.parseInt(command[1]);
				int clipNum = Integer.parseInt(command[2]);
				try {
					message.paste(index, clipNum);
				} catch (NullPointerException e) {
					System.out.println("ClipBoard not found");
				} catch (IndexOutOfBoundsException e) {
					System.out.println("Error: Integer cannot exceed "
							+ "message length");
				}
			}
			break;
		case "help":
			try {
				new ProcessBuilder(MANUAL).start();
			} catch (IOException e) {
				e.printStackTrace();
			}
			break;
		default: System.out.println("Command not found! Type help for more "
				+ "info.");
		break;
		}
		return message.toString();
	}

	/*******************************************************************
	 * Method that checks whether the user trying to use the copy command
	 * has the correct syntax.
	 * 
	 * @param command the array of Strings containing the command the user
	 * entered.
	 * @return boolean whether or not the command that was entered was 
	 * valid.
	 ******************************************************************/
	public boolean isValidCopy(String[] command) {

		if (command.length < 4 || command.length > 4) {
			System.out.println("Invalid Syntax! Type help for more info.");
			return false;
		}

		/* The isDigit() method checks for positive integers, if a negative
		 * integer was entered it would return false here */
		if (!Character.isDigit(command[1].charAt(0)) || 
				!Character.isDigit(command[2].charAt(0)) || 
				!Character.isDigit(command[3].charAt(0))) {
			System.out.println("You must enter a valid integer!");
			return false;
		}
		return true;
	}

	/*******************************************************************
	 * Method that checks whether the user trying to use the paste command
	 * has the correct syntax.
	 * 
	 * @param command the array of Strings containing the command the user
	 * entered.
	 * @return boolean whether or not the command that was entered was 
	 * valid.
	 ******************************************************************/
	public boolean isValidPaste(String[] command) {

		if (command.length < 3) {
			System.out.println("You must enter a character and "
					+ "or integer!");
			return false;
		}

		/* The isDigit() method checks for positive integers, if a negative
		 * integer was entered it would return false here */
		if (!Character.isDigit(command[1].charAt(0)) ||
				!Character.isDigit(command[2].charAt(0)) 
				|| command.length > 3) { 
			System.out.println("Invalid Syntax! Type help for more info.");
			return false;
		}
		return true;
	}

	/*******************************************************************
	 * Method that checks whether the user trying to use the add command
	 * has the correct syntax.
	 * 
	 * @param command the array of Strings containing the command the user
	 * entered.
	 * @return boolean whether or not the command that was entered was 
	 * valid.
	 ******************************************************************/
	public boolean isValidAdd(String[] command) {

		if (command.length < 3) {
			System.out.println("You must enter a character and "
					+ "or integer!");
			return false;
		}

		/* The isDigit() method checks for positive integers, if a negative
		 * integer was entered it would return false here */
		if (!Character.isDigit(command[2].charAt(0)) 
				|| command.length > 3) { 
			System.out.println("Invalid Syntax! Type help for more info.");
			return false;
		}

		if (command[1].length() > 1) {
			System.out.println("You can only add one letter at a time!");
			return false;
		}
		return true;
	}

	/*******************************************************************
	 * Method that checks whether the user trying to use the remove command
	 * has the correct syntax.
	 * 
	 * @param command the array of Strings containing the command the user
	 * entered.
	 * @return boolean whether or not the command that was entered was 
	 * valid.
	 ******************************************************************/
	public boolean isValidRemove(String[] command) {

		if (command.length < 2) {
			System.out.println("You must enter a character!");
			return false;
		}

		if (command.length > 2) {
			System.out.println("Invalid Syntax! Type help for more info.");
			return false;
		}

		if (command[1].length() > 1) {
			System.out.println("You can only remove one letter at a time!");
			return false;
		}
		return true;
	}

	/*******************************************************************
	 * Method that checks whether the user trying to use the save command
	 * has the correct syntax.
	 * 
	 * @param command the array of Strings containing the command the user
	 * entered.
	 * @return boolean whether or not the command that was entered was 
	 * valid.
	 ******************************************************************/
	public boolean isValidSave(String[] command) {

		if (command.length < 2) {
			System.out.println("You must specify a filename!");
			return false;
		}

		if (command.length > 2) {
			System.out.println("Invalid Syntax! Type help for more info.");
			return false;
		}
		return true;
	}

	/*******************************************************************
	 * Method that saves all of the undo commands to a text file.
	 * 
	 * @param fileName name of the file that the user wants to save the text 
	 * file to.
	 ******************************************************************/
	public void save(String fileName) {
		PrintWriter out = null;
		try {
			out = new PrintWriter(new BufferedWriter(new FileWriter
					(fileName)));
		} catch (Exception e) {
			e.printStackTrace();
		}

		for (String i : message.getUndoCommands()) {
			out.println(i);
		}
		out.close();
	}
}
