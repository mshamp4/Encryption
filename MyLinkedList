package project4;

import java.util.ArrayList;

public class MyLinkedList {

	private Node top; 

	private Node tail;

	private int count;

	private ArrayList<String> undoCommands;

	public MyLinkedList() {
		Node temp = new Node(null, null, null);
		top = new Node("top", temp, null);
		top.getNext().setPrevious(top);
		tail = new Node("tail", null, temp);
		temp.setNext(tail);

		setCount(0);
		undoCommands = new ArrayList<String>();
	}

	public int getCount() {
		return count;
	}

	public void setCount(int count) {
		this.count = count;
	}

	public ArrayList<String> getUndoCommands() {
		return undoCommands;
	}

	public void addAfterTop(String s) {

		if (top.getNext().getData() == null) {
			top.getNext().setData(s);
			return;
		}

		Node temp = new Node(s, top, null); 

		temp.setNext(top.getNext());
		top.getNext().setPrevious(temp);
		top.setNext(temp);
		temp.setPrevious(top);
	}

	public void add(String s) {

		int i = s.length();

		while (i > 0) {
			setCount(getCount() + 1);
			addAfterTop(s.substring(i -1, i));
			i--;
		}
	}

	public boolean addAfterIndex(String s, int index) {
		Node curr = new Node(s, null, null);
		Node temp = top.getNext();

		for (int i = 0; i < index; i ++) {
			temp = temp.getNext();
		}

		curr.setNext(temp.getNext());
		temp.getNext().setPrevious(curr);
		temp.setNext(curr);
		curr.setPrevious(temp);

		setCount(getCount() + 1);
		undoCommands.add("r " + s + " " + index);

		return true;
	}

	public boolean addAtIndex(String s, int index) {
		Node curr = new Node(s, null, null);
		Node temp = top.getNext();

		if (top.getNext().getData() == null) {
			top.getNext().setData(s);
			return true;
		}

		for (int i = 0; i < index; i ++) {
			temp = temp.getNext();
		}

		try {
			curr.setPrevious(temp.getPrevious());
			temp.getPrevious().setNext(curr);
			curr.setNext(temp);
			temp.setPrevious(curr);
		}
		catch (NullPointerException e) {
			System.out.println("Error: you typed the wrong file or mixed up message!");
			System.exit(0);
		}

		setCount(getCount() + 1);

		return true;
	}

	public boolean delete(String s) {

		if (top.getNext() == null)
			return false;

		if (!find(s))
			return false;

		int count = getCount() - 1;
		Node temp = tail.getPrevious();
		while (temp.getPrevious() != null) {
			if (temp.getData().equals(s)) {
				temp.getPrevious().setNext(temp.getNext());
				temp.getNext().setPrevious(temp.getPrevious());
				setCount(getCount() - 1);
				undoCommands.add("a " + s + " " + count);
			}

			count--;
			temp = temp.getPrevious();
		}

		return true;
	}

	public boolean deleteAfterIndex(String s, int index) {
		Node temp = top.getNext();

		try {
			for (int i = 0; i <= index; i ++)
				temp = temp.getNext();

			temp.getPrevious().setNext(temp.getNext());
			temp.getNext().setPrevious(temp.getPrevious());

			setCount(getCount() - 1);
		}
		catch (NullPointerException e) {
			System.out.println("Error: you typed the wrong file or mixed up message!");
			System.exit(0);
		}

		return true;
	}

	public boolean find(String s) {

		Node temp = top.getNext();
		while (temp.getNext() != null) {
			if (temp.getData().equals(s))
				return true;
			temp = temp.getNext();
		}

		return false;
	}

	public String toString() {

		String message = "";

		Node temp = top.getNext();
		while (temp.getNext() != null) {
			message += temp.getData();
			temp = temp.getNext();
		}

		return message;
	}

	public static void main(String[] args) {
		MyLinkedList list = new MyLinkedList();

		list.add("Hello");
		list.delete("H");
		System.out.print(list.toString());
	}
}
